# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InventoryDetail(BaseModel):
    """
    InventoryDetail
    """ # noqa: E501
    buy_sell: StrictStr
    cost_r: Optional[Union[StrictFloat, StrictInt]] = None
    fee: Union[StrictFloat, StrictInt]
    make_a: Union[StrictFloat, StrictInt]
    make_a_per: Union[StrictFloat, StrictInt]
    ord_no: StrictStr
    pay_n: Union[StrictFloat, StrictInt]
    price: Union[StrictFloat, StrictInt]
    price_evn: Union[StrictFloat, StrictInt]
    qty: StrictInt
    qty_c: Optional[StrictInt] = None
    qty_h: Optional[StrictInt] = None
    qty_r: Optional[StrictInt] = None
    t_date: StrictStr
    t_time: Optional[StrictStr] = None
    tax: Optional[Union[StrictFloat, StrictInt]] = None
    tax_g: Optional[Union[StrictFloat, StrictInt]] = None
    trade: Optional[StrictInt] = None
    value_mkt: Union[StrictFloat, StrictInt]
    value_now: Union[StrictFloat, StrictInt]
    user_def: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["buy_sell", "cost_r", "fee", "make_a", "make_a_per", "ord_no", "pay_n", "price", "price_evn", "qty", "qty_c", "qty_h", "qty_r", "t_date", "t_time", "tax", "tax_g", "trade", "value_mkt", "value_now", "user_def"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InventoryDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cost_r (nullable) is None
        # and model_fields_set contains the field
        if self.cost_r is None and "cost_r" in self.model_fields_set:
            _dict['cost_r'] = None

        # set to None if qty_c (nullable) is None
        # and model_fields_set contains the field
        if self.qty_c is None and "qty_c" in self.model_fields_set:
            _dict['qty_c'] = None

        # set to None if qty_h (nullable) is None
        # and model_fields_set contains the field
        if self.qty_h is None and "qty_h" in self.model_fields_set:
            _dict['qty_h'] = None

        # set to None if qty_r (nullable) is None
        # and model_fields_set contains the field
        if self.qty_r is None and "qty_r" in self.model_fields_set:
            _dict['qty_r'] = None

        # set to None if t_time (nullable) is None
        # and model_fields_set contains the field
        if self.t_time is None and "t_time" in self.model_fields_set:
            _dict['t_time'] = None

        # set to None if tax (nullable) is None
        # and model_fields_set contains the field
        if self.tax is None and "tax" in self.model_fields_set:
            _dict['tax'] = None

        # set to None if tax_g (nullable) is None
        # and model_fields_set contains the field
        if self.tax_g is None and "tax_g" in self.model_fields_set:
            _dict['tax_g'] = None

        # set to None if trade (nullable) is None
        # and model_fields_set contains the field
        if self.trade is None and "trade" in self.model_fields_set:
            _dict['trade'] = None

        # set to None if user_def (nullable) is None
        # and model_fields_set contains the field
        if self.user_def is None and "user_def" in self.model_fields_set:
            _dict['user_def'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InventoryDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buy_sell": obj.get("buy_sell"),
            "cost_r": obj.get("cost_r"),
            "fee": obj.get("fee"),
            "make_a": obj.get("make_a"),
            "make_a_per": obj.get("make_a_per"),
            "ord_no": obj.get("ord_no"),
            "pay_n": obj.get("pay_n"),
            "price": obj.get("price"),
            "price_evn": obj.get("price_evn"),
            "qty": obj.get("qty"),
            "qty_c": obj.get("qty_c"),
            "qty_h": obj.get("qty_h"),
            "qty_r": obj.get("qty_r"),
            "t_date": obj.get("t_date"),
            "t_time": obj.get("t_time"),
            "tax": obj.get("tax"),
            "tax_g": obj.get("tax_g"),
            "trade": obj.get("trade"),
            "value_mkt": obj.get("value_mkt"),
            "value_now": obj.get("value_now"),
            "user_def": obj.get("user_def")
        })
        return _obj


