# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from fugle_fastapi_client.models.action import Action
from fugle_fastapi_client.models.ap_code import APCode
from fugle_fastapi_client.models.bs_flag import BSFlag
from fugle_fastapi_client.models.price_flag import PriceFlag
from fugle_fastapi_client.models.trade import Trade
from typing import Optional, Set
from typing_extensions import Self

class CreateOrder(BaseModel):
    """
    CreateOrder
    """ # noqa: E501
    buy_sell: Action
    ap_code: APCode
    price_flag: PriceFlag
    bs_flag: BSFlag
    trade: Trade
    stock_no: StrictStr
    quantity: StrictInt
    price: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["buy_sell", "ap_code", "price_flag", "bs_flag", "trade", "stock_no", "quantity", "price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buy_sell": obj.get("buy_sell"),
            "ap_code": obj.get("ap_code"),
            "price_flag": obj.get("price_flag"),
            "bs_flag": obj.get("bs_flag"),
            "trade": obj.get("trade"),
            "stock_no": obj.get("stock_no"),
            "quantity": obj.get("quantity"),
            "price": obj.get("price")
        })
        return _obj


