# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.action import Action
from openapi_client.models.ap_code import APCode
from openapi_client.models.bs_flag import BSFlag
from openapi_client.models.price_flag import PriceFlag
from openapi_client.models.trade import Trade
from typing import Optional, Set
from typing_extensions import Self

class OrderResultResponse(BaseModel):
    """
    OrderResultResponse
    """ # noqa: E501
    ap_code: APCode
    avg_price: Union[StrictFloat, StrictInt]
    bs_flag: BSFlag
    buy_sell: Action
    cel_qty: Union[StrictFloat, StrictInt]
    cel_qty_share: StrictInt
    celable: StrictStr
    err_code: StrictStr
    err_msg: StrictStr
    mat_qty: Union[StrictFloat, StrictInt]
    mat_qty_share: StrictInt
    od_price: Union[StrictFloat, StrictInt]
    ord_date: StrictStr
    ord_no: StrictStr
    ord_status: StrictStr
    ord_time: StrictStr
    org_qty: Union[StrictFloat, StrictInt]
    org_qty_share: StrictInt
    pre_ord_no: StrictStr
    price_flag: PriceFlag
    stock_no: StrictStr
    trade: Trade
    work_date: StrictStr
    user_def: Optional[StrictStr] = ''
    __properties: ClassVar[List[str]] = ["ap_code", "avg_price", "bs_flag", "buy_sell", "cel_qty", "cel_qty_share", "celable", "err_code", "err_msg", "mat_qty", "mat_qty_share", "od_price", "ord_date", "ord_no", "ord_status", "ord_time", "org_qty", "org_qty_share", "pre_ord_no", "price_flag", "stock_no", "trade", "work_date", "user_def"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderResultResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderResultResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ap_code": obj.get("ap_code"),
            "avg_price": obj.get("avg_price"),
            "bs_flag": obj.get("bs_flag"),
            "buy_sell": obj.get("buy_sell"),
            "cel_qty": obj.get("cel_qty"),
            "cel_qty_share": obj.get("cel_qty_share"),
            "celable": obj.get("celable"),
            "err_code": obj.get("err_code"),
            "err_msg": obj.get("err_msg"),
            "mat_qty": obj.get("mat_qty"),
            "mat_qty_share": obj.get("mat_qty_share"),
            "od_price": obj.get("od_price"),
            "ord_date": obj.get("ord_date"),
            "ord_no": obj.get("ord_no"),
            "ord_status": obj.get("ord_status"),
            "ord_time": obj.get("ord_time"),
            "org_qty": obj.get("org_qty"),
            "org_qty_share": obj.get("org_qty_share"),
            "pre_ord_no": obj.get("pre_ord_no"),
            "price_flag": obj.get("price_flag"),
            "stock_no": obj.get("stock_no"),
            "trade": obj.get("trade"),
            "work_date": obj.get("work_date"),
            "user_def": obj.get("user_def") if obj.get("user_def") is not None else ''
        })
        return _obj


